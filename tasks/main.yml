---
### User and group creation
- name: Create Epic groups
  ansible.builtin.group:
    name: "{{ item['name'] }}"
    gid: "{{ item['gid'] }}"
    state: present
  loop: "{{ epic_groups }}"


- name: Create cachegrp
  ansible.builtin.group:
    name: cachegrp
    gid: "{{ cachegrp_gid }}"
    state: present
  when: cachegrp

- name: Create irisusr
  ansible.builtin.group:
    name: irisusr
    gid: "{{ irisuser_gid }}"
    state: present
  when: not cachegrp

- name: Create Epic users
  ansible.builtin.user:
    createhome: true
    name: "{{ item['user'] }}"
    comment: "{{ item['comment'] }}"
    group: "{{ item['group'] }}"
    groups: "{{ item['groups'] }}"
    uid: "{{ item['uid'] }}"
    state: "{{ item['state'] }}"
    password: "{{ item['password'] }}"
  loop: "{{ epic_users }}"


### Install required packages
- name: Install packages for Red Hat distros
  when: ansible_facts['os_family'] == 'RedHat'
  block:
    - name: Ensure packges needed for Epic and role are installed
      ansible.builtin.dnf:
        name:
          - perl
          - ksh
          - sysstat
          - psmisc
          - openssh-server
          - firewalld
          - net-tools
          - lsscsi
          - virt-what
          - chrony
          - iperf3
          - patch
          - python3-policycoreutils
          - python3-cryptography
          - gcc
          - gdb
          - lsof
          - strace
          - tmux
          - perf
          - pcp-system-tools
          - bcc-tools
          - epic-config
        state: present
      tags:
        - firewall

- name: Install packages for Red Hat distros
  when: ansible_distribution == 'Ubuntu'
  block:
    - name: Ensure packages needed for Epic and role are installed
      ansible.builtin.apt:
        name:
          - perl
          - perl-doc
          - ksh
          - sysstat
          - psmisc
          - openssh-server
          - ufw
          - net-tools
          - lsscsi
          - virt-what
          - cron
          - chrony
          - rsync
          - iperf3
          - libaio1
          - patch
          - python3-cryptography
          - dstat
          - gcc
          - gdb
          - lsof
          - strace
          - tmux
          - linux-tools-common
          - bpftrace
          - htop
          - iftop
          - nmon
        state: present

### Post package install tasks
- name: Gather package facts
  ansible.builtin.package_facts:

### systemd tweaks
- name: Load service facts
  ansible.builtin.service_facts:

### This if for EL 8 and above
- name: Configure EL > 7
  when: ansible_facts['distribution_major_version'] >= '8'
  block:
    - name: Configure settings group
      community.general.ini_file:
        path: /etc/tuned/epic/tuned.conf
        section: sysctl
        option: vm.hugetlb_shm_group
        value: 10000
      notify: Set tuned profile

    - name: Configure hugepage size
      community.general.ini_file:
        path: /etc/tuned/epic/tuned.conf
        section: variables
        option: hugepagesz
        value: "{{ hugepage_size }}"
      notify: Set tuned profile

    - name: Configure hugepage settings
      community.general.ini_file:
        path: /etc/tuned/epic/tuned.conf
        section: variables
        option: hugepages
        value: "{{ hugepages }}"
      notify: Set tuned profile

    - name: Configure nosmt for public clouds
      community.general.ini_file:
        path: /etc/tuned/epic/tuned.conf
        section: bootloader
        option: cmdline.nosmt
        value: nosmt
      when:
        ansible_system_vendor == 'Amazon EC2' or
        ansible_system_vendor == 'Microsoft Azure' or
        ansible_system_vendor == 'GCE'
      notify: Set tuned profile

    - name: Configure unknown_nmi_panic for public clouds
      community.general.ini_file:
        path: /etc/tuned/epic/tuned.conf
        section: sysctl
        option: kernel.unknown_nmi_panic
        value: 1
      when:
        ansible_system_vendor == 'Amazon EC2'
      notify: Set tuned profile

### Directory creation
- name: Create /usr/local/epic
  ansible.builtin.file:
    path: /usr/local/epic
    state: directory
    owner: epicadm
    group: epicsys
    mode: "0755"

- name: Create core dump directory
  ansible.builtin.file:
    path: /epic_core
    state: directory
    owner: epicadm
    group: "10002"
    mode: "0777"

- name: Create epicfiles directory
  ansible.builtin.file:
    path: /epicfiles
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Create epic directory
  ansible.builtin.file:
    path: /epic
    state: directory
    owner: epicadm
    group: epicsys
    mode: '2755'

- name: Create bin directory
  ansible.builtin.file:
    path: /epic/bin
    state: directory
    owner: epicadm
    group: epicuser
    mode: "0755"
  tags:
    - epicmenu

- name: Create /epic/tmp directory
  ansible.builtin.file:
    path: /epic/tmp
    state: directory
    owner: epicadm
    group: epicuser
    mode: '1777'

- name: Create PKI directories /epic/pki
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: epicadm
    group: epicsys
    mode: "0755"
  loop:
    - "/epic/pki"
    - "/epic/pki/certs"
    - "/epic/pki/certs/esmp"
    - "/epic/pki/keys"
    - "/epic/pki/ca"


- name: Create /epic/work
  ansible.builtin.file:
    path: /epic/work
    state: directory
    owner: epicadm
    group: epicsys
    mode: "0755"

- name: Create /epic/logs
  ansible.builtin.file:
    path: /epic/logs
    state: directory
    owner: epicadm
    group: epicuser
    mode: "0755"

- name: Create /epic/conf
  ansible.builtin.file:
    path: /epic/conf
    state: directory
    owner: epicadm
    group: epicuser
    mode: "0755"

- name: Set default file context for bin directories
  community.general.sefcontext:
    target: "{{ item | lower }}(/.*)?"
    setype: bin_t
    state: present
  loop:
    - /epic/bin
    - /epic/redalert/bin
  when: ansible_facts['os_family'] == 'RedHat'
  notify: Run restorecon epic

- name: Set default file context for instance bin directories
  community.general.sefcontext:
    target: "/epic/{{ item | lower }}/bin"
    setype: bin_t
    state: present
  loop: "{{ odb_instances }}"
  when:
    - odb_instances is defined
    - ansible_facts['os_family'] == 'RedHat'
  notify: Run restorecon epic

- name: Set default file context for instance bin directories
  community.general.sefcontext:
    target: "/epic/{{ item | lower }}/bin(/.*)?"
    setype: bin_t
    state: present
  loop: "{{ odb_instances }}"
  when:
    - odb_instances is defined
    - ansible_facts['os_family'] == 'RedHat'
  notify: Run restorecon epic


- name: Set the permissions for irisstart
  ansible.builtin.file:
    path: "/epic/{{ item | lower }}/irissys/bin/irisstart"
    owner: root
    group: epicsys
    mode: '04610' # also works
    state: file
  loop: "{{ odb_instances }}"
  when:
    - odb_instances is defined
    - ansible_facts['os_family'] == 'RedHat'
  ignore_errors: true

- name: Set the permissions for irisstop
  ansible.builtin.file:
    path: "/epic/{{ item | lower }}/irissys/bin/irisstop"
    owner: root
    group: epicsys
    mode: '04610' # also works
    state: file
  loop: "{{ odb_instances }}"
  when:
    - odb_instances is defined
    - ansible_facts['os_family'] == 'RedHat'
  ignore_errors: true

- name: Install service files
  ansible.builtin.copy:
    src: "{{ item }}.service"
    dest: /etc/systemd/system/{{ item }}.service
    owner: root
    group: root
    mode: "0664"
  loop:
    - epic@
    - redalert

- name: Make sure epic@.service is enabled
  ansible.builtin.systemd:
    name: "epic@{{ item | lower }}"
    enabled: true
    daemon_reload: true
  loop: "{{ odb_instances }}"
  when: useepicatservice

- name: Enable redalert.service
  ansible.builtin.systemd:
    name: redalert
    enabled: true
    daemon_reload: true

### Copy scripts and miscelaneous files
- name: Check sslcert binary
  ansible.builtin.stat:
    path: /epic/redalert/bin/sslcert
  register: sslcert_bin_stat

- name: Check RedAlert conf file
  ansible.builtin.stat:
    path: /epic/redalert/conf/epic.conf
  register: ra_conf_file_stat

### TLS/PKI setup
- name: Generate private key
  community.crypto.openssl_privatekey:
    path: /epic/pki/keys/private.key
    passphrase: "{{ private_key_passphrase | default(omit) }}"
    cipher: auto
    owner: epicadm
    group: epicsys

- name: Generate CSR
  community.crypto.openssl_csr:
    path: /epic/pki/{{ ansible_hostname }}.csr
    privatekey_path: /epic/pki/keys/private.key
    privatekey_passphrase: "{{ private_key_passphrase | default(omit) }}"
    common_name: '{{ ansible_fqdn }}'
    organizational_unit_name: "{{ epic_csr['ou'] }}"
    organization_name: "{{ epic_csr['o'] }}"
    locality_name: "{{ epic_csr['l'] }}"
    state_or_province_name: "{{ epic_csr['s'] }}"
    country_name: "{{ epic_csr['c'] }}"
    subject_alt_name: "{{ dnsnames | map('regex_replace', '^', 'DNS:') | list }}"

- name: Get ESMP_TRUSTED_DIR
  ansible.builtin.shell: set -o pipefail &
    grep '<ESMP_TRUSTED_DIR>' /epic/redalert/conf/epic.conf | cut -d '>' -f 2 | cut -d '<' -f 1
  register: esmp_trusted_dir
  check_mode: false
  changed_when: false
  when: ra_conf_file_stat['stat']['exists']

- name: Get contents of ESMP_TRUSTED_DIR
  ansible.builtin.find:
    paths: "{{ esmp_trusted_dir['stdout'] }}"
    pattern: '*'
  register: esmp_trusted_dir_files
  when:
    - ra_conf_file_stat
    - esmp_trusted_dir['stdout'] | default('')

- name: Get CA bundle from uri
  when: ca_bundle is match("https?://.*")
  block:
    - name: Copy CA bunle from {{ ca_bundle }}
      ansible.builtin.copy:
        content: "{{ lookup('ansible.builtin.url', ca_bundle, split_lines=false) }}"
        dest: /epic/pki/ca/{{ ca_bundle | basename }}
        owner: epicadm
        group: epicsys
        mode: "0644"
      notify:
        - Update RedAlert CAs
        - Clear RedAlert CAs

- name: Get CA bundle from file
  when: ca_bundle is not match("https?://.*")
  block:
    - name: Check for CA bundle
      ansible.builtin.stat:
        path: files/{{ ca_bundle }}
      register: ca_bundle_stat
      changed_when: false
      check_mode: false

    - name: Copy CA certs
      ansible.builtin.copy:
        src: "{{ ca_bundle }}"
        dest: /epic/pki/ca/{{ ca_bundle | basename }}
        owner: epicadm
        group: epicsys
        mode: "0644"
      notify:
        - Update RedAlert CAs
        - Clear RedAlert CAs
      when: ca_bundle_stat['stat']['exists']

### Set ESMP password
- name: Set ESMP password
  when: epic_esmp_password is defined
  block:
    - name: Ensure password is decrypted
      ansible.builtin.set_fact:
        internal_esmp_password: "{{ epic_esmp_password }}"

    - name: Check for key.conf
      ansible.builtin.stat:
        path: /epic/redalert/conf/key.conf
      check_mode: false
      changed_when: false
      register: redalert_key_stat


    - name: Make sure Directly exsists
      ansible.builtin.file:
        path: /epic/redalert/conf/
        owner: epicadm
        group: epicsys
        state: directory


    - name: Copy stub when key.conf doesn't exist
      ansible.builtin.copy:
        src: key.conf
        dest: /epic/redalert/conf/key.conf
        owner: epicadm
        group: epicsys
        mode: "0400"
      when: not redalert_key_stat['stat']['exists']

    - name: Inject ESMP password
      ansible.builtin.lineinfile:
        path: /epic/redalert/conf/key.conf
        line: '  <KEY>{{ internal_esmp_password | password_hash }}</KEY>'
        regexp: ^\s*<KEY>
        insertbefore: </xml>
        owner: epicadm
        group: epicsys
        mode: "0400"
      notify: Restart ESMP

- name: Get selinux port tags for ssh_port_t
  ansible.builtin.shell: set -o pipefail |
    /sbin/semanage port -l |
    grep ssh_port_t
  register: ssh_port_t_stat
  check_mode: false
  changed_when: false
  when: ansible_facts['selinux']['status'] == 'enabled'

- name: Enable SSH on port 2222 in selinux
  community.general.seport:
    ports: 22, 2222
    proto: tcp
    setype: ssh_port_t
    state: present
  when:
    - ansible_facts['selinux']['status'] == 'enabled'
    - "'2222' not in ssh_port_t_stat['stdout']"

- name: Create /etc/ssh
  ansible.builtin.file:
    path: /etc/ssh
    state: directory
    owner: root
    group: root
    mode: "0755"  # noqa risky-file-permissions

- name: Disable root login over SSH
  ansible.builtin.lineinfile:
    line: PermitRootLogin no
    regexp: '^PermitRootLogin'
    path: /etc/ssh/sshd_config
  notify: Restart sshd

- name: Explicily enable port 22
  ansible.builtin.lineinfile:
    line: Port 22
    regexp: '^Port 22$'
    path: /etc/ssh/sshd_config
  notify: Restart sshd

- name: Set sshd to listen on port 2222
  ansible.builtin.lineinfile:
    line: Port 2222
    regexp: '^Port 2222'
    insertafter: '^Port 22$'
    path: /etc/ssh/sshd_config
  notify: Restart sshd

- name: Set port 2222 to sftp only
  ansible.builtin.blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK SFTP Port"
    block: |
      Match LocalPort 2222
        ForceCommand /usr/libexec/openssh/sftp-server -d /epicfiles/
    path: /etc/ssh/sshd_config
  notify: Restart sshd

- name: Set epic menu exclusions
  ansible.builtin.lineinfile:
    line: Match LocalPort 22 User {{ epicmenu_exclusions | join(',') }}
    regexp: '^Match LocalPort 22 User'
    path: /etc/ssh/sshd_config
    insertbefore: '^# BEGIN ANSIBLE MANAGED BLOCK epicmenu for'
    firstmatch: true
  notify: Restart sshd
  when: epicmenu_exclusions is defined

- name: Set epic menus for groups
  ansible.builtin.blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK epicmenu for {{ item['group'] }}"
    block: |
      Match LocalPort 22 Group {{ item['group'] }} User *,!{{ epicmenu_exclusions | join(',!') }}
        ForceCommand /epic/bin/{{ item['menu'] }}
    path: /etc/ssh/sshd_config
  notify: Restart sshd
  loop: "{{ epicmenu_groups }}"
  when: epicmenu_groups is defined

- name: Set epic menus for users
  ansible.builtin.blockinfile:
    marker: "# {mark} ANSIBLE MANAGED BLOCK epicmenu for {{ item['user'] }}"
    block: |
      Match LocalPort 22 User {{ item['user'] }}
        ForceCommand /epic/bin/{{ item['menu'] }}
    path: /etc/ssh/sshd_config
  notify: Restart sshd
  loop: "{{ epicmenu_users }}"
  when: epicmenu_users is defined

- name: Copy /usr/local/bin files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /usr/local/bin/{{ item | basename }}
    owner: root
    group: root
    mode: "0755"
  with_fileglob: localbin/*

- name: Create manage_epicuser_group
  ansible.builtin.template:
    src: manage_epicuser_group.j2
    dest: /usr/local/bin/manage_epicuser_group
    owner: root
    group: root
    mode: "0775"

- name: Add cron job for manage_epicuser_group
  ansible.builtin.file:
    src: /usr/local/bin/manage_epicuser_group
    dest: /etc/cron.hourly/manage_epicuser_group
    state: link
  when: "'cronie' in ansible_facts['packages']"

- name: Add audit lines to PAM files
  ansible.builtin.lineinfile:
    dest: "{{ item }}"
    state: present
    regexp: '^session\s+required\s+pam_tty_audit\.so'
    line: 'session required pam_tty_audit.so disable=* enable=root,epicadm'
  loop:
    - /etc/pam.d/system-auth
    - /etc/pam.d/password-auth
  notify:
    - Restart auditd
  when: "'audit' in ansible_facts['packages']"

### Sudoers config
- name: Create working copy of system sudoers file
  ansible.builtin.command: cp -f /etc/sudoers /etc/sudoers.tmp
  changed_when: false

- name: Back up sudoers file
  ansible.builtin.command: cp -f /etc/sudoers /etc/sudoers.bak
  changed_when: false

- name: Remove Defaults requiretty
  ansible.builtin.lineinfile:
    dest: /etc/sudoers.tmp
    state: absent
    regexp: 'Defaults    requiretty'

- name: Check for sudoers differences
  ansible.builtin.command: diff /etc/sudoers.tmp /etc/sudoers
  register: sudoers_diff
  ignore_errors: true
  changed_when: false

- name: Check working copy of suders file, and replace active sudoers config
  ansible.builtin.shell: set -o pipefail |
    visudo -q -c -f /etc/sudoers.tmp &&
    cp -f /etc/sudoers.tmp /etc/sudoers
  register: sudoers_result
  changed_when: sudoers_result.rc == 0 and sudoers_diff.rc == 1

### Setup firewall rules
- name: Refresh service facts
  ansible.builtin.service_facts:
  tags:
    - firewall

- name: Start firewalld
  ansible.builtin.systemd:
    name: firewalld
    state: started
    enabled: true
  when:
    - ansible_env['container'] is not defined
    - ansible_distribution != 'Ubuntu'
  tags:
    - firewall

- name: UFW started
  ansible.builtin.systemd:
    name: ufw
    state: started
    enabled: true
  when:
    - ansible_env['container'] is not defined
    - ansible_distribution == 'Ubuntu'
  tags:
    - firewall

- name: Setup firewall rules
  ansible.builtin.include_tasks: firewall_rules.yml
  loop: "{{ odb_firewall_services }}"
  loop_control:
    loop_var: firewall_service
  tags:
    - firewall

- name: Refresh service facts
  service_facts:
  tags:
    - firewall

- name: Enable firewall rules on EL
  when: ansible_distribution != 'Ubuntu'
  block:
    - name: Reload firewalld
      ansible.builtin.command: firewall-cmd --reload
      changed_when: false
      when: ansible_facts['services']['firewalld.service']['state'] == 'running'
      tags:
        - firewall

    - name: Enable dynamic Epic firewall rules
      ansible.posix.firewalld:
        service: "{{ item['name'] }}"
        permanent: true
        immediate: true
        state: enabled
      loop: "{{ odb_firewall_services }}"
      when: ansible_facts['services']['firewalld.service']['state'] == 'running'
      tags:
        - firewall

    - name: Enable SFTP port on firewall
      ansible.posix.firewalld:
        port: 2222/tcp
        permanent: true
        state: enabled
      when: ansible_facts['services']['firewalld.service']['state'] == 'running'
      tags:
        - firewall

- name: Enable firewall rules on Ubuntu
  when: ansible_distribution == 'Ubuntu'
  block:
    - name: Reload firewalld
      command: ufw reload
      changed_when: false
      tags:
        - firewall

    - name: Ensure SSH is enabled in ufw
      community.general.ufw:
        rule: allow
        name: OpenSSH
      tags:
        - firewall

    - name: Enable UFW
      community.general.ufw:
        state: enabled
      tags:
        - firewall

    - name: Enable dynamic Epic firewall rules
      community.general.ufw:
        rule: allow
        name: "{{ item['name'] }}"
      loop: "{{ odb_firewall_services }}"
      tags:
        - firewall

    - name: Enable SFTP port on firewall
      community.general.ufw:
        rule: allow
        port: '2222'
        proto: tcp
      tags:
        - firewall

### Get status of /etc/vmware-tools before trying to copy file there
- name: Get status of /etc/vmware-tools directory
  ansible.builtin.stat:
    path: /etc/vmware-tools
  register: etc_vmwaretools
  changed_when: false
  check_mode: false

- name: Copy tools.conf
  ansible.builtin.copy:
    src: tools.conf
    dest: /etc/vmware-tools/tools.conf
    owner: root
    group: root
    mode: "0644"  # noqa risky-file-permissions
  when: etc_vmwaretools['stat']['exists']
  notify: Restart vmtools

- name: Check for chrony.conf
  ansible.builtin.stat:
    path: /etc/chrony.conf
  register: chrony_conf_stat
  changed_when: false
  check_mode: false

- name: Update chrony config
  when: chrony_conf_stat['stat']['exists']
  block:
    - name: Disable makestep
      ansible.builtin.lineinfile:
        path: /etc/chrony.conf
        regexp: 'makestep'
        line: '#makestep 2'
    - name: Set minsources to 2
      ansible.builtin.lineinfile:
        path: /etc/chrony.conf
        regexp: '^minsources'
        line: 'minsources 2'
    - name: Set logchange to 0.5
      ansible.builtin.lineinfile:
        path: /etc/chrony.conf
        regexp: '^logchange'
        line: 'logchange 0.5'

### epicmenu config
- name: Create conf directory
  ansible.builtin.file:
    path: /epic/conf
    state: directory
    owner: epicadm
    group: epicuser
    mode: "0755"
  tags:
    - epicmenu

- name: Install epicmenu confs
  ansible.builtin.template:
    src: templates/epicmenu/{{ item | basename }}
    dest: /epic/conf/{{ (item | basename | splitext)[0] }}
    owner: epicadm
    group: epicsys
    mode: "0644"
    backup: true
  with_fileglob: templates/epicmenu/*
  tags:
    - epicmenu

- name: Ensure links exists for epicmenus
  ansible.builtin.file:
    path: /epic/bin/{{ ((item | basename | splitext)[0] | splitext)[0] }}
    src: epicmenu
    state: link
    force: true
  when: ((item | basename | splitext)[0] | splitext)[0] != 'epicmenu'
  with_fileglob: templates/epicmenu/*
  tags:
    - epicmenu

- name: Install environment epicmenus
  ansible.builtin.include_tasks: epicmenu.yml
  loop: "{{ epic_environments }}"
  loop_control:
    loop_var: EpicEnvironment
  tags:
    - epicmenu

- name: Manage local IRIS users
  ansible.builtin.include_tasks: iris_users_loop.yml
  loop: "{{ epic_environments }}"
  loop_control:
    loop_var: EpicEnvironment

- name: Create /etc/vmware-tools/backupScripts.d
  ansible.builtin.file:
    path: /etc/vmware-tools/backupScripts.d
    state: directory
    owner: root
    group: root
    mode: "0755"
  when: ansible_virtualization_type == 'VMware'

- name: Copy quiesce script
  ansible.builtin.copy:
    src: quiesce
    dest: /etc/vmware-tools/backupScripts.d/quiesce
    owner: root
    group: root
    mode: "0755"
  when: ansible_virtualization_type == 'VMware'
