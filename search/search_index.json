{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Role Name C:\\Users\\jmpugh\\git\\ansible-role-epic_odb Description Epic ODB Server Role Dependencies collection: community.general Information Author Company License Minimum Ansible Version imntreal NGHS MIT 2.8","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#role-name","text":"C:\\Users\\jmpugh\\git\\ansible-role-epic_odb","title":"Role Name"},{"location":"#description","text":"Epic ODB Server Role","title":"Description"},{"location":"#dependencies","text":"collection: community.general","title":"Dependencies"},{"location":"#information","text":"Author Company License Minimum Ansible Version imntreal NGHS MIT 2.8","title":"Information"},{"location":"defaults/main/","text":"main.yml useepicatservice false ... members_command getent group ... members_filter '| cut -d '':'' -f 4 | sed ''s/,/ /g''' ca_bundle https://letsencrypt.org/certs/isrgrootx1.pem ... epic_csr c: US l: Verona o: Epic ou: IT s: Wisconsin cachegrp false ... epic_users - comment: Epic Admin group: epicsys groups: epicuser,irisusr,dmngrp password: '{{ epic_passwords[''epicadm''] }}' state: present uid: 10000 user: epicadm - comment: Epic Daemon group: epicuser groups: dmngrp password: '{{ epic_passwords[''epicdmn''] }}' state: present uid: 10001 user: epicdmn - comment: Epic Tempmlate group: epicuser groups: users password: '{{ epic_passwords[''epicsupt''] }}' state: present uid: 10002 user: epicsupt - comment: Epic Text group: epicuser groups: users password: '{{ epic_passwords[''epictxt''] }}' state: present uid: 10003 user: epictxt - comment: Epic iscagent group: iscagent groups: users password: '{{ epic_passwords[''iscagent''] }}' state: present uid: 10004 user: iscagent","title":"main.yml"},{"location":"defaults/main/#mainyml","text":"","title":"main.yml"},{"location":"defaults/main/#useepicatservice","text":"false ...","title":"useepicatservice"},{"location":"defaults/main/#members_command","text":"getent group ...","title":"members_command"},{"location":"defaults/main/#members_filter","text":"'| cut -d '':'' -f 4 | sed ''s/,/ /g'''","title":"members_filter"},{"location":"defaults/main/#ca_bundle","text":"https://letsencrypt.org/certs/isrgrootx1.pem ...","title":"ca_bundle"},{"location":"defaults/main/#epic_csr","text":"c: US l: Verona o: Epic ou: IT s: Wisconsin","title":"epic_csr"},{"location":"defaults/main/#cachegrp","text":"false ...","title":"cachegrp"},{"location":"defaults/main/#epic_users","text":"- comment: Epic Admin group: epicsys groups: epicuser,irisusr,dmngrp password: '{{ epic_passwords[''epicadm''] }}' state: present uid: 10000 user: epicadm - comment: Epic Daemon group: epicuser groups: dmngrp password: '{{ epic_passwords[''epicdmn''] }}' state: present uid: 10001 user: epicdmn - comment: Epic Tempmlate group: epicuser groups: users password: '{{ epic_passwords[''epicsupt''] }}' state: present uid: 10002 user: epicsupt - comment: Epic Text group: epicuser groups: users password: '{{ epic_passwords[''epictxt''] }}' state: present uid: 10003 user: epictxt - comment: Epic iscagent group: iscagent groups: users password: '{{ epic_passwords[''iscagent''] }}' state: present uid: 10004 user: iscagent","title":"epic_users"},{"location":"files/epic%40.service/","text":"epic@.service [Unit] Description=Starts the IRIS/Cache database and Epic daemons for %I. ConditionFileIsExecutable=/epic/%i/bin/runlevel ConditionFileIsExecutable=/epic/%i/bin/runlevel After=local-fs.target ISCAgent.service Wants=ISCAgent.service RequiresMountsFor=/epic [Service] Type=oneshot ExecStart=/usr/local/bin/shebang /epic/%i/bin/runlevel -r u ExecStop=/usr/local/bin/shebang /epic/%i/bin/runlevel -r c RemainAfterExit=yes Restart=no [Install] WantedBy=default.target","title":"epic@.service"},{"location":"files/epic%40.service/#epicservice","text":"[Unit] Description=Starts the IRIS/Cache database and Epic daemons for %I. ConditionFileIsExecutable=/epic/%i/bin/runlevel ConditionFileIsExecutable=/epic/%i/bin/runlevel After=local-fs.target ISCAgent.service Wants=ISCAgent.service RequiresMountsFor=/epic [Service] Type=oneshot ExecStart=/usr/local/bin/shebang /epic/%i/bin/runlevel -r u ExecStop=/usr/local/bin/shebang /epic/%i/bin/runlevel -r c RemainAfterExit=yes Restart=no [Install] WantedBy=default.target","title":"epic@.service"},{"location":"files/limits/","text":"limits root soft core -1 root hard core -1 epicadm soft core -1 epicadm hard core -1 epicdmn soft nproc -1 epicdmn hard nproc -1 epicadm soft nproc -1 epicadm hard nproc -1","title":"limits"},{"location":"files/limits/#limits","text":"root soft core -1 root hard core -1 epicadm soft core -1 epicadm hard core -1 epicdmn soft nproc -1 epicdmn hard nproc -1 epicadm soft nproc -1 epicadm hard nproc -1","title":"limits"},{"location":"files/redalert.service/","text":"redalert.service [Unit] Description=Epic RedAlert service After=ntpd.service local-fs.target [Service] User=epicadm Group=epicsys ExecStart=/epic/redalert/bin/ra_sched --start --nodaemon ExecStop=/epic/redalert/bin/ra_sched --stop KillMode=none [Install] WantedBy=default.target","title":"redalert.service"},{"location":"files/redalert.service/#redalertservice","text":"[Unit] Description=Epic RedAlert service After=ntpd.service local-fs.target [Service] User=epicadm Group=epicsys ExecStart=/epic/redalert/bin/ra_sched --start --nodaemon ExecStop=/epic/redalert/bin/ra_sched --stop KillMode=none [Install] WantedBy=default.target","title":"redalert.service"},{"location":"files/sudoers/","text":"sudoers Cmnd_Alias EPIC_CMDS = /usr/bin/iris, /usr/bin/irissession, /usr/bin/ccontrol, /usr/bin/csession, /usr/bin/su - epicadm, /usr/bin/su - epicdmn, /usr/local/bin/snapenv, /usr/local/bin/cleansnap %epicodba ALL=(ALL) ALL epicadm ALL=(ALL) NOPASSWD: EPIC_CMDS","title":"sudoers"},{"location":"files/sudoers/#sudoers","text":"Cmnd_Alias EPIC_CMDS = /usr/bin/iris, /usr/bin/irissession, /usr/bin/ccontrol, /usr/bin/csession, /usr/bin/su - epicadm, /usr/bin/su - epicdmn, /usr/local/bin/snapenv, /usr/local/bin/cleansnap %epicodba ALL=(ALL) ALL epicadm ALL=(ALL) NOPASSWD: EPIC_CMDS","title":"sudoers"},{"location":"files/tools.conf/","text":"tools.conf [vmbackup] enableSyncDriver = false","title":"tools.conf"},{"location":"files/tools.conf/#toolsconf","text":"[vmbackup] enableSyncDriver = false","title":"tools.conf"},{"location":"files/localbin/cleansnap/","text":"cleansnap #! /usr/bin/env bash set -Eeuo pipefail function usage() { echo \"Usage:\" echo \" $0 <ENV>\" echo \" ENV: Environment to clean snapshot of (e.g. tst)\" } if [[ $# != 1 ]]; then usage exit 1 fi if [[ $EUID -ne 0 ]]; then echo \"This script must be run as root\" exit 1 fi instance=\"$1\" if ccontrol qlist \"$instance\" &> /dev/null; then # Make sure instance is valid instance_path=$(ccontrol qlist ${instance} | cut -d '^' -f 2 | rev | cut -d '/' -f 2- | rev) instance_lv=$(findmnt -n -o SOURCE ${instance_path}) instance_lv_name=$(lvs --noheadings -o lv_name \"$instance_lv\" | sed 's/ //g') lv=${instance_lv}_snap lv_name=${instance_lv_name}_snap elif iris qlist \"$instance\" &> /dev/null; then # Check if instance is valid IRIS instance_path=$(iris qlist ${instance} | cut -d '^' -f 2 | rev | cut -d '/' -f 2- | rev) instance_lv=$(findmnt -n -o SOURCE ${instance_path}) instance_lv_name=$(lvs --noheadings -o lv_name \"$instance_lv\" | sed 's/ //g') lv=${instance_lv}_snap lv_name=${instance_lv_name}_snap else echo \"ERROR - Can't find instance ${instance}.\" exit 2 fi echo $lv if ! lvs \"$lv\" &> /dev/null; then echo \"ERROR - $lv_name does not appear to be a LVM logical volume.\" exit 2 fi vg=$(lvs --noheadings -o vg_name \"$lv\" | sed 's/ //g') mount_points=$(mount | grep $lv | awk '{ print $3 }') for mount_point in $mount_points; do umount $mount_point rmdir $mount_point done lvremove -f \"${lv}\" # vim:set ts=2 sw=2 et:","title":"cleansnap"},{"location":"files/localbin/cleansnap/#cleansnap","text":"#! /usr/bin/env bash set -Eeuo pipefail function usage() { echo \"Usage:\" echo \" $0 <ENV>\" echo \" ENV: Environment to clean snapshot of (e.g. tst)\" } if [[ $# != 1 ]]; then usage exit 1 fi if [[ $EUID -ne 0 ]]; then echo \"This script must be run as root\" exit 1 fi instance=\"$1\" if ccontrol qlist \"$instance\" &> /dev/null; then # Make sure instance is valid instance_path=$(ccontrol qlist ${instance} | cut -d '^' -f 2 | rev | cut -d '/' -f 2- | rev) instance_lv=$(findmnt -n -o SOURCE ${instance_path}) instance_lv_name=$(lvs --noheadings -o lv_name \"$instance_lv\" | sed 's/ //g') lv=${instance_lv}_snap lv_name=${instance_lv_name}_snap elif iris qlist \"$instance\" &> /dev/null; then # Check if instance is valid IRIS instance_path=$(iris qlist ${instance} | cut -d '^' -f 2 | rev | cut -d '/' -f 2- | rev) instance_lv=$(findmnt -n -o SOURCE ${instance_path}) instance_lv_name=$(lvs --noheadings -o lv_name \"$instance_lv\" | sed 's/ //g') lv=${instance_lv}_snap lv_name=${instance_lv_name}_snap else echo \"ERROR - Can't find instance ${instance}.\" exit 2 fi echo $lv if ! lvs \"$lv\" &> /dev/null; then echo \"ERROR - $lv_name does not appear to be a LVM logical volume.\" exit 2 fi vg=$(lvs --noheadings -o vg_name \"$lv\" | sed 's/ //g') mount_points=$(mount | grep $lv | awk '{ print $3 }') for mount_point in $mount_points; do umount $mount_point rmdir $mount_point done lvremove -f \"${lv}\" # vim:set ts=2 sw=2 et:","title":"cleansnap"},{"location":"files/localbin/cpasswd/","text":"cpasswd #!/usr/bin/env bash set -Eeuo pipefail function usage() { echo \"Usage:\" echo \" $0 [options] [INST] <accountName>\" echo \" INST: Instance to change password in (e.g. TST)\" echo \" accountName: Name of user whose password to change\" echo \" options:\" echo \" -a: Operate in all instances\" echo } function change_password() { printf \"d \\$SYSTEM.Security.ChangePassword(\\\"$account\\\", \\\"$password\\\")\\nh\\n\" | csession $instance -U '%SYS' } all_instances() { for instance in $(ccontrol qlist | cut -d '^' -f 1); do echo $instance change_password done } if [[ $# != 2 ]]; then usage exit 1 fi allinstances=0 instance='' case $1 in '-a') allinstances=1 ;; *) instance=$1 ;; esac account=$2 if [[ $allinstances == 1 ]]; then echo \"Changing password for user ${account} in all instances.\" else echo \"Changing password for user ${account} in ${instance}.\" fi echo -n \"New password: \" read password if [[ $allinstances == 1 ]]; then all_instances else change_password fi exit 0","title":"cpasswd"},{"location":"files/localbin/cpasswd/#cpasswd","text":"#!/usr/bin/env bash set -Eeuo pipefail function usage() { echo \"Usage:\" echo \" $0 [options] [INST] <accountName>\" echo \" INST: Instance to change password in (e.g. TST)\" echo \" accountName: Name of user whose password to change\" echo \" options:\" echo \" -a: Operate in all instances\" echo } function change_password() { printf \"d \\$SYSTEM.Security.ChangePassword(\\\"$account\\\", \\\"$password\\\")\\nh\\n\" | csession $instance -U '%SYS' } all_instances() { for instance in $(ccontrol qlist | cut -d '^' -f 1); do echo $instance change_password done } if [[ $# != 2 ]]; then usage exit 1 fi allinstances=0 instance='' case $1 in '-a') allinstances=1 ;; *) instance=$1 ;; esac account=$2 if [[ $allinstances == 1 ]]; then echo \"Changing password for user ${account} in all instances.\" else echo \"Changing password for user ${account} in ${instance}.\" fi echo -n \"New password: \" read password if [[ $allinstances == 1 ]]; then all_instances else change_password fi exit 0","title":"cpasswd"},{"location":"files/localbin/cpenv/","text":"cpenv #! /usr/bin/env bash nojournal='^dcifc$|^eid$|^err$|^loc$|^locmu$|^rt$|^rtepicsec$|^rtlimited$|^rtrouscratch$|^rtrouscratchlimited$|^scratchdb$' function usage() { echo \"Usage:\" echo \" $0 <SRC> <DST>\" echo \" SRC: Path to source environment (e.g. /epic/mst)\" echo \" DST: Path to desitnation environment, local or remote (e.g. dsthost:/epic/dst)\" } if [[ $# != 2 ]]; then usage exit 1 fi src=\"${1}\" dst=\"${2}\" if [[ $dst =~ ':' ]]; then if [[ ! -d $src ]]; then usage exit 2 fi # unset these, so we can detect if this is set, later unset dsthost unset dstpath dsthost=$(echo $dst | cut -d ':' -f 1) dstpath=$(echo $dst | cut -d ':' -f 2) else if [[ ! -d $src ]] || [[ ! -d $dst ]]; then usage exit 2 fi fi cd $src # Find all journaled data sets for the instance for ds in $(find * -maxdepth 1 -type f \\( -name CACHE.DAT -o -name IRIS.DAT \\) 2> /dev/null | egrep -v \"$nojournal\"); do echo \"$ds\" | cut -d '/' -f 1 if [ ! -z \"$dsthost\" ]; then ssh $dsthost mkdir -p \"${dstpath}/$(dirname $ds)\" pv $ds | zstd -T8 - | ssh $dsthost \"zstdcat -T8 - | pv > ${dstpath}/${ds}\" else mkdir -p \"${dst}/$(dirname $ds)\" pv \"${ds}\" > \"${dst}/${ds}\" fi done","title":"cpenv"},{"location":"files/localbin/cpenv/#cpenv","text":"#! /usr/bin/env bash nojournal='^dcifc$|^eid$|^err$|^loc$|^locmu$|^rt$|^rtepicsec$|^rtlimited$|^rtrouscratch$|^rtrouscratchlimited$|^scratchdb$' function usage() { echo \"Usage:\" echo \" $0 <SRC> <DST>\" echo \" SRC: Path to source environment (e.g. /epic/mst)\" echo \" DST: Path to desitnation environment, local or remote (e.g. dsthost:/epic/dst)\" } if [[ $# != 2 ]]; then usage exit 1 fi src=\"${1}\" dst=\"${2}\" if [[ $dst =~ ':' ]]; then if [[ ! -d $src ]]; then usage exit 2 fi # unset these, so we can detect if this is set, later unset dsthost unset dstpath dsthost=$(echo $dst | cut -d ':' -f 1) dstpath=$(echo $dst | cut -d ':' -f 2) else if [[ ! -d $src ]] || [[ ! -d $dst ]]; then usage exit 2 fi fi cd $src # Find all journaled data sets for the instance for ds in $(find * -maxdepth 1 -type f \\( -name CACHE.DAT -o -name IRIS.DAT \\) 2> /dev/null | egrep -v \"$nojournal\"); do echo \"$ds\" | cut -d '/' -f 1 if [ ! -z \"$dsthost\" ]; then ssh $dsthost mkdir -p \"${dstpath}/$(dirname $ds)\" pv $ds | zstd -T8 - | ssh $dsthost \"zstdcat -T8 - | pv > ${dstpath}/${ds}\" else mkdir -p \"${dst}/$(dirname $ds)\" pv \"${ds}\" > \"${dst}/${ds}\" fi done","title":"cpenv"},{"location":"files/localbin/freeze_all_cache_instances.sh/","text":"freeze_all_cache_instances.sh #!/usr/bin/env bash set noclobber date fail='' if which ccontrol &> /dev/null; then for inst in $(ccontrol qlist | grep running | cut -d '^' -f 1 | tr [:upper:] [:lower:]); do if [[ -f \"/epic/$inst/bin/instfreeze\" ]]; then \"/epic/$inst/bin/instfreeze\" if [[ $? -ne 0 ]]; then echo \"$inst failed to freeze\" fail+=\"$inst \" fi else echo \"Can't find instfreeze for $inst\" fail+=\"$inst \" fi done if [[ $fail -ne '' ]];then echo \"$fail\" fi fi if which iris &> /dev/null; then for inst in $(iris qlist | grep running | cut -d '^' -f 1 | tr [:upper:] [:lower:]); do if [[ -f \"/epic/$inst/bin/instfreeze\" ]]; then \"/epic/$inst/bin/instfreeze\" if [[ $? -ne 0 ]]; then echo \"$inst failed to freeze\" fail+=\"$inst \" fi else echo \"Can't find instfreeze for $inst\" fail+=\"$inst \" fi done if [[ $fail -ne '' ]];then echo \"$fail\" fi fi date","title":"freeze_all_cache_instances.sh"},{"location":"files/localbin/freeze_all_cache_instances.sh/#freeze_all_cache_instancessh","text":"#!/usr/bin/env bash set noclobber date fail='' if which ccontrol &> /dev/null; then for inst in $(ccontrol qlist | grep running | cut -d '^' -f 1 | tr [:upper:] [:lower:]); do if [[ -f \"/epic/$inst/bin/instfreeze\" ]]; then \"/epic/$inst/bin/instfreeze\" if [[ $? -ne 0 ]]; then echo \"$inst failed to freeze\" fail+=\"$inst \" fi else echo \"Can't find instfreeze for $inst\" fail+=\"$inst \" fi done if [[ $fail -ne '' ]];then echo \"$fail\" fi fi if which iris &> /dev/null; then for inst in $(iris qlist | grep running | cut -d '^' -f 1 | tr [:upper:] [:lower:]); do if [[ -f \"/epic/$inst/bin/instfreeze\" ]]; then \"/epic/$inst/bin/instfreeze\" if [[ $? -ne 0 ]]; then echo \"$inst failed to freeze\" fail+=\"$inst \" fi else echo \"Can't find instfreeze for $inst\" fail+=\"$inst \" fi done if [[ $fail -ne '' ]];then echo \"$fail\" fi fi date","title":"freeze_all_cache_instances.sh"},{"location":"files/localbin/ipasswd/","text":"ipasswd #!/usr/bin/env bash set -Eeuo pipefail function usage() { echo \"Usage:\" echo \" $0 [options] [INST] <accountName>\" echo \" INST: Instance to change password in (e.g. TST)\" echo \" accountName: Name of user whose password to change\" echo \" options:\" echo \" -a: Operate in all instances\" echo } function change_password() { printf \"d \\$SYSTEM.Security.ChangePassword(\\\"$account\\\", \\\"$password\\\")\\nh\\n\" | irissession $instance -U '%SYS' } all_instances() { for instance in $(iris qlist | cut -d '^' -f 1); do echo $instance change_password done } if [[ $# != 2 ]]; then usage exit 1 fi allinstances=0 instance='' case $1 in '-a') allinstances=1 ;; *) instance=$1 ;; esac account=$2 if [[ $allinstances == 1 ]]; then echo \"Changing password for user ${account} in all instances.\" else echo \"Changing password for user ${account} in ${instance}.\" fi echo -n \"New password: \" read password if [[ $allinstances == 1 ]]; then all_instances else change_password fi exit 0","title":"ipasswd"},{"location":"files/localbin/ipasswd/#ipasswd","text":"#!/usr/bin/env bash set -Eeuo pipefail function usage() { echo \"Usage:\" echo \" $0 [options] [INST] <accountName>\" echo \" INST: Instance to change password in (e.g. TST)\" echo \" accountName: Name of user whose password to change\" echo \" options:\" echo \" -a: Operate in all instances\" echo } function change_password() { printf \"d \\$SYSTEM.Security.ChangePassword(\\\"$account\\\", \\\"$password\\\")\\nh\\n\" | irissession $instance -U '%SYS' } all_instances() { for instance in $(iris qlist | cut -d '^' -f 1); do echo $instance change_password done } if [[ $# != 2 ]]; then usage exit 1 fi allinstances=0 instance='' case $1 in '-a') allinstances=1 ;; *) instance=$1 ;; esac account=$2 if [[ $allinstances == 1 ]]; then echo \"Changing password for user ${account} in all instances.\" else echo \"Changing password for user ${account} in ${instance}.\" fi echo -n \"New password: \" read password if [[ $allinstances == 1 ]]; then all_instances else change_password fi exit 0","title":"ipasswd"},{"location":"files/localbin/shebang/","text":"shebang #! /usr/bin/env bash $(grep '\\#\\!' $1 | sed 's/#!//g' | awk '{print $1}') $@","title":"shebang"},{"location":"files/localbin/shebang/#shebang","text":"#! /usr/bin/env bash $(grep '\\#\\!' $1 | sed 's/#!//g' | awk '{print $1}') $@","title":"shebang"},{"location":"files/localbin/snapenv/","text":"snapenv #! /usr/bin/env bash set -Eeo pipefail function usage() { echo \"Usage:\" echo \" $0 <ENV>\" echo \" ENV: Environment to snapshot (e.g. tst)\" echo echo \"The script will return the temporary mount path.\" } if [[ $# != 1 ]]; then usage exit 1 fi if [[ $EUID -ne 0 ]]; then echo \"This script must be run as root\" exit 1 fi instance=\"$1\" if ccontrol qlist \"$instance\" &> /dev/null; then # Check if instance is valid Cache' directory=$(ccontrol qlist \"$instance\" | cut -d '^' -f 2) elif iris qlist \"$instance\" &> /dev/null; then # Check if instance is valid IRIS directory=$(iris qlist \"$instance\" | cut -d '^' -f 2) else echo \"ERROR - Can't find instance ${instance}.\" exit 2 fi inst_path=$(echo \"$directory\" | awk -F '/' 'NF{NF-=1}1' OFS='/') environment=$(/epic/bin/epiccontrol printenvs | tr -s ' ' | grep -i \"^ $instance \" | awk '{ print $2 }') data_path=$(\"${inst_path}/bin/managedb\" --report name=\"$environment\" --parsable | tail -n 1 | awk -F '/' 'NF{NF-=2}1' OFS='/') lv=$(findmnt -n -o SOURCE --target \"$directory\") if ! lvs \"$lv\" &> /dev/null; then echo \"ERROR - $lv does not appear to be a LVM logical volume.\" exit 2 fi if lvs \"${lv}_snap\" &> /dev/null; then echo \"ERROR - Logical volume ${lv}_snap already exists.\" exit 2 fi lv_name=$(lvs --noheadings -o lv_name \"$lv\" | sed 's/ //g') vg=$(lvs --noheadings -o vg_name \"$lv\" | sed 's/ //g') vg_free=$(vgs --noheadings --nosuffix --units b -o vg_free \"$vg\" | sed 's/ //g') sudo -iu epicadm \"${inst_path}/bin/instfreeze\" > /dev/null if [[ \"$vg_free\" -le 5368709120 ]]; then # If there is 5 GB or less free lvcreate -L \"${vg_free}B\" -s -n \"${lv_name}_snap\" \"$lv\" > /dev/null else if [[ \"$(echo \"$vg_free * 0.9 % 512\" | bc | cut -d '.' -f 1)\" -eq 0 ]]; then # If 90% of free space is divisable by 512 lvcreate -L \"$(echo \"$vg_free * 0.9\" | bc | cut -d '.' -f 1)B\" -s -n \"${lv_name}_snap\" \"$lv\" > /dev/null else lvcreate -L \"$(echo \"512 * (($vg_free * 0.9) / 512)\" | bc | cut -d '.' -f 1)B\" -s -n \"${lv_name}_snap\" \"$lv\" > /dev/null fi fi snap_path=\"/dev/${vg}/${lv_name}_snap\" sudo -iu epicadm \"${inst_path}/bin/instthaw\" > /dev/null temp_path=\"$(mktemp -d)\" # Trigger device mapper to update udevadm trigger > /dev/null # If device map exists, mount it. if [ -e \"$snap_path\" ]; then if [[ \"$(mount | grep $lv | awk '{ print $5 }')\" == 'xfs' ]]; then mount -o nouuid,ro \"$snap_path\" \"$temp_path\" > /dev/null else mount -o ro \"$snap_path\" \"$temp_path\" > /dev/null fi else echo \"ERROR - $snap_path does not exist.\" rmdir \"$temp_path\" exit 3 fi echo \"$temp_path\" # vim:set ts=2 sw=2 et:","title":"snapenv"},{"location":"files/localbin/snapenv/#snapenv","text":"#! /usr/bin/env bash set -Eeo pipefail function usage() { echo \"Usage:\" echo \" $0 <ENV>\" echo \" ENV: Environment to snapshot (e.g. tst)\" echo echo \"The script will return the temporary mount path.\" } if [[ $# != 1 ]]; then usage exit 1 fi if [[ $EUID -ne 0 ]]; then echo \"This script must be run as root\" exit 1 fi instance=\"$1\" if ccontrol qlist \"$instance\" &> /dev/null; then # Check if instance is valid Cache' directory=$(ccontrol qlist \"$instance\" | cut -d '^' -f 2) elif iris qlist \"$instance\" &> /dev/null; then # Check if instance is valid IRIS directory=$(iris qlist \"$instance\" | cut -d '^' -f 2) else echo \"ERROR - Can't find instance ${instance}.\" exit 2 fi inst_path=$(echo \"$directory\" | awk -F '/' 'NF{NF-=1}1' OFS='/') environment=$(/epic/bin/epiccontrol printenvs | tr -s ' ' | grep -i \"^ $instance \" | awk '{ print $2 }') data_path=$(\"${inst_path}/bin/managedb\" --report name=\"$environment\" --parsable | tail -n 1 | awk -F '/' 'NF{NF-=2}1' OFS='/') lv=$(findmnt -n -o SOURCE --target \"$directory\") if ! lvs \"$lv\" &> /dev/null; then echo \"ERROR - $lv does not appear to be a LVM logical volume.\" exit 2 fi if lvs \"${lv}_snap\" &> /dev/null; then echo \"ERROR - Logical volume ${lv}_snap already exists.\" exit 2 fi lv_name=$(lvs --noheadings -o lv_name \"$lv\" | sed 's/ //g') vg=$(lvs --noheadings -o vg_name \"$lv\" | sed 's/ //g') vg_free=$(vgs --noheadings --nosuffix --units b -o vg_free \"$vg\" | sed 's/ //g') sudo -iu epicadm \"${inst_path}/bin/instfreeze\" > /dev/null if [[ \"$vg_free\" -le 5368709120 ]]; then # If there is 5 GB or less free lvcreate -L \"${vg_free}B\" -s -n \"${lv_name}_snap\" \"$lv\" > /dev/null else if [[ \"$(echo \"$vg_free * 0.9 % 512\" | bc | cut -d '.' -f 1)\" -eq 0 ]]; then # If 90% of free space is divisable by 512 lvcreate -L \"$(echo \"$vg_free * 0.9\" | bc | cut -d '.' -f 1)B\" -s -n \"${lv_name}_snap\" \"$lv\" > /dev/null else lvcreate -L \"$(echo \"512 * (($vg_free * 0.9) / 512)\" | bc | cut -d '.' -f 1)B\" -s -n \"${lv_name}_snap\" \"$lv\" > /dev/null fi fi snap_path=\"/dev/${vg}/${lv_name}_snap\" sudo -iu epicadm \"${inst_path}/bin/instthaw\" > /dev/null temp_path=\"$(mktemp -d)\" # Trigger device mapper to update udevadm trigger > /dev/null # If device map exists, mount it. if [ -e \"$snap_path\" ]; then if [[ \"$(mount | grep $lv | awk '{ print $5 }')\" == 'xfs' ]]; then mount -o nouuid,ro \"$snap_path\" \"$temp_path\" > /dev/null else mount -o ro \"$snap_path\" \"$temp_path\" > /dev/null fi else echo \"ERROR - $snap_path does not exist.\" rmdir \"$temp_path\" exit 3 fi echo \"$temp_path\" # vim:set ts=2 sw=2 et:","title":"snapenv"},{"location":"files/localbin/thaw_all_cache_instances.sh/","text":"thaw_all_cache_instances.sh #!/usr/bin/env bash set noclobber date fail='' if which ccontrol &> /dev/null; then for inst in $(ccontrol qlist | grep running | cut -d '^' -f 1 | tr [:upper:] [:lower:]); do if [[ -f \"/epic/$inst/bin/instthaw\" ]]; then \"/epic/$inst/bin/instthaw\" if [[ $? -ne 0 ]]; then echo \"$inst failed to thaw\" fail+=\"$inst \" fi else echo \"Can't find instthaw for $inst\" fail+=\"$inst \" fi done if [[ $fail -ne '' ]]; then echo $fail fi fi if which iris &> /dev/null; then for inst in $(iris qlist | grep running | cut -d '^' -f 1 | tr [:upper:] [:lower:]); do if [[ -f \"/epic/$inst/bin/instthaw\" ]]; then \"/epic/$inst/bin/instthaw\" if [[ $? -ne 0 ]]; then echo \"$inst failed to thaw\" fail+=\"$inst \" fi else echo \"Can't find instthaw for $inst\" fail+=\"$inst \" fi done if [[ $fail -ne '' ]]; then echo $fail fi fi date","title":"thaw_all_cache_instances.sh"},{"location":"files/localbin/thaw_all_cache_instances.sh/#thaw_all_cache_instancessh","text":"#!/usr/bin/env bash set noclobber date fail='' if which ccontrol &> /dev/null; then for inst in $(ccontrol qlist | grep running | cut -d '^' -f 1 | tr [:upper:] [:lower:]); do if [[ -f \"/epic/$inst/bin/instthaw\" ]]; then \"/epic/$inst/bin/instthaw\" if [[ $? -ne 0 ]]; then echo \"$inst failed to thaw\" fail+=\"$inst \" fi else echo \"Can't find instthaw for $inst\" fail+=\"$inst \" fi done if [[ $fail -ne '' ]]; then echo $fail fi fi if which iris &> /dev/null; then for inst in $(iris qlist | grep running | cut -d '^' -f 1 | tr [:upper:] [:lower:]); do if [[ -f \"/epic/$inst/bin/instthaw\" ]]; then \"/epic/$inst/bin/instthaw\" if [[ $? -ne 0 ]]; then echo \"$inst failed to thaw\" fail+=\"$inst \" fi else echo \"Can't find instthaw for $inst\" fail+=\"$inst \" fi done if [[ $fail -ne '' ]]; then echo $fail fi fi date","title":"thaw_all_cache_instances.sh"},{"location":"handlers/main/","text":"main.yml grub-mkconfig restartauditd restart_sshd restart_vmtools Clear RedAlert CAs Update RedAlert CAs restorecon epic","title":"main.yml"},{"location":"handlers/main/#mainyml","text":"grub-mkconfig restartauditd restart_sshd restart_vmtools Clear RedAlert CAs Update RedAlert CAs restorecon epic","title":"main.yml"},{"location":"roletemplates/csr.cnf.j2/","text":"csr.cnf.j2 [ req ] default_bits = 2048 distinguished_name = req_distinguished_name req_extensions = req_ext prompt = no [ req_distinguished_name ] C = US ST = GA L = Gainesville O = Northeast Georgia Health System OU = IT Dept. CN = {{ ansible_fqdn }} [ req_ext ] keyUsage = keyEncipherment, dataEncipherment extendedKeyUsage = serverAuth, clientAuth subjectAltName = @alt_names [alt_names] DNS.1 = {{ ansible_fqdn }} {% for item in epic_environments %} DNS.{{ loop['index'] + 1 }} = epic-{{ item['Environment'] | lower }}.nghs.com {% endfor %}","title":"csr.cnf.j2"},{"location":"roletemplates/csr.cnf.j2/#csrcnfj2","text":"[ req ] default_bits = 2048 distinguished_name = req_distinguished_name req_extensions = req_ext prompt = no [ req_distinguished_name ] C = US ST = GA L = Gainesville O = Northeast Georgia Health System OU = IT Dept. CN = {{ ansible_fqdn }} [ req_ext ] keyUsage = keyEncipherment, dataEncipherment extendedKeyUsage = serverAuth, clientAuth subjectAltName = @alt_names [alt_names] DNS.1 = {{ ansible_fqdn }} {% for item in epic_environments %} DNS.{{ loop['index'] + 1 }} = epic-{{ item['Environment'] | lower }}.nghs.com {% endfor %}","title":"csr.cnf.j2"},{"location":"roletemplates/firewalld.xml.j2/","text":"firewalld.xml.j2 <?xml version=\"1.0\" encoding=\"utf-8\"?> <service> <short>{{ epic_firewall_short }}</short> <description>{{ epic_firewall_description }}</description> {% for item in epic_firewall_ports %} <port protocol=\"{{ item['protocol'] | default('tcp') }}\" port=\"{{ item['port'] }}\"/> {% endfor %} </service>","title":"firewalld.xml.j2"},{"location":"roletemplates/firewalld.xml.j2/#firewalldxmlj2","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <service> <short>{{ epic_firewall_short }}</short> <description>{{ epic_firewall_description }}</description> {% for item in epic_firewall_ports %} <port protocol=\"{{ item['protocol'] | default('tcp') }}\" port=\"{{ item['port'] }}\"/> {% endfor %} </service>","title":"firewalld.xml.j2"},{"location":"roletemplates/grub.j2/","text":"grub.j2 GRUB_TIMEOUT=5 GRUB_DISTRIBUTOR=\"$(sed 's, release .*$,,g' /etc/system-release)\" GRUB_DEFAULT=saved GRUB_DISABLE_SUBMENU=true GRUB_TERMINAL_OUTPUT=\"console\" GRUB_CMDLINE_LINUX=\"\"crashkernel=auto resume=/dev/mapper/rhel_{{ ansible_hostname }}-swap rd.lvm.lv=rhel_{{ ansible_hostname }}/root rd.lvm.lv=rhel_{{ ansible_hostname }}/swap rhgb quiet transparent_hugepage=never\" GRUB_DISABLE_RECOVERY=\"true\"","title":"grub.j2"},{"location":"roletemplates/grub.j2/#grubj2","text":"GRUB_TIMEOUT=5 GRUB_DISTRIBUTOR=\"$(sed 's, release .*$,,g' /etc/system-release)\" GRUB_DEFAULT=saved GRUB_DISABLE_SUBMENU=true GRUB_TERMINAL_OUTPUT=\"console\" GRUB_CMDLINE_LINUX=\"\"crashkernel=auto resume=/dev/mapper/rhel_{{ ansible_hostname }}-swap rd.lvm.lv=rhel_{{ ansible_hostname }}/root rd.lvm.lv=rhel_{{ ansible_hostname }}/swap rhgb quiet transparent_hugepage=never\" GRUB_DISABLE_RECOVERY=\"true\"","title":"grub.j2"},{"location":"roletemplates/manage_epicuser_group.j2/","text":"manage_epicuser_group.j2 #!/bin/bash # look through epicuser group for users who shouldn't be there for user in $({{ members_command }} epicuser {{ members_filter }} | egrep -iv {{ forced_epicusers | join(\"|\") | quote }}); do if [[ ! $(id -Gn $user | egrep {{ epicuser_groups | join(\"|\") | quote }}) ]]; then # if I'm not in at least one AD group, remove me from epicuser gpasswd -d $user epicuser fi done {% for item in epicuser_groups %} # add members of {{ item }} to epicuser for user in $({{ members_command }} {{ item }} {{ members_filter }}); do usermod -aG epicuser $user done {% endfor %} # add non-group users {% for item in forced_epicusers %} usermod -aG epicuser {{ item }} {% endfor %}","title":"manage_epicuser_group.j2"},{"location":"roletemplates/manage_epicuser_group.j2/#manage_epicuser_groupj2","text":"#!/bin/bash # look through epicuser group for users who shouldn't be there for user in $({{ members_command }} epicuser {{ members_filter }} | egrep -iv {{ forced_epicusers | join(\"|\") | quote }}); do if [[ ! $(id -Gn $user | egrep {{ epicuser_groups | join(\"|\") | quote }}) ]]; then # if I'm not in at least one AD group, remove me from epicuser gpasswd -d $user epicuser fi done {% for item in epicuser_groups %} # add members of {{ item }} to epicuser for user in $({{ members_command }} {{ item }} {{ members_filter }}); do usermod -aG epicuser $user done {% endfor %} # add non-group users {% for item in forced_epicusers %} usermod -aG epicuser {{ item }} {% endfor %}","title":"manage_epicuser_group.j2"},{"location":"roletemplates/ufw_app.j2/","text":"ufw_app.j2 [{{ epic_firewall_short }}] title={{ epic_firewall_short }} description={{ epic_firewall_description }} ports={{ ufw_epic_firewall_ports }}","title":"ufw_app.j2"},{"location":"roletemplates/ufw_app.j2/#ufw_appj2","text":"[{{ epic_firewall_short }}] title={{ epic_firewall_short }} description={{ epic_firewall_description }} ports={{ ufw_epic_firewall_ports }}","title":"ufw_app.j2"},{"location":"roletemplates/emenv/epicmenu.conf.j2/","text":"epicmenu.conf.j2 <?xml version=\"1.0\" encoding=\"utf-8\"?> <xml> <AUTOFIND></AUTOFIND> <MENUHEADER>{{ EpicEnvironment['Instance'] }} Environment</MENUHEADER> <MENU_DEF> <Analyst Tools> <CLARITYEXPORT> <APPLICATION>CRPACK</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Clarity Export</NAME> <ORDER>1</ORDER> <SHORTCUT>CX</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </CLARITYEXPORT> <EXPORTCATEGORIES> <APPLICATION>EACATOUT</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Export Categories</NAME> <ORDER>2</ORDER> <SHORTCUT>EC</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </EXPORTCATEGORIES> <EXPORTRECORDS> <APPLICATION>main^JXPORT</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Export Records</NAME> <ORDER>3</ORDER> <SHORTCUT>ER</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </EXPORTRECORDS> <GENERATEIMPORTSPREADSHEET> <APPLICATION>JXPORT</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Generate Import Spreadsheet</NAME> <ORDER>4</ORDER> <SHORTCUT>GI</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </GENERATEIMPORTSPREADSHEET> <IMPORTCATEGORIES> <APPLICATION>EACATIN</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Import Categories</NAME> <ORDER>5</ORDER> <SHORTCUT>IC</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </IMPORTCATEGORIES> <RICHTEXTCONTENTREVIEW> <APPLICATION>CIRPT</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Rich Text Content Review</NAME> <ORDER>6</ORDER> <SHORTCUT>RT</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </RICHTEXTCONTENTREVIEW> <ROUTERREPOSTUTILITY> <APPLICATION>RepostUtil^KECRUTL16()</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Router Repost Utility</NAME> <ORDER>12</ORDER> <SHORTCUT>RRU</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </ROUTERREPOSTUTILITY> <TESTINGTOOLMENU> <APPLICATION>JATMENU</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Testing Tool Menu</NAME> <ORDER>11</ORDER> <SHORTCUT>JAT</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </TESTINGTOOLMENU> <VIEWCATEGORIES> <APPLICATION>EACATVW</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> View Categories</NAME> <ORDER>7</ORDER> <SHORTCUT>VC</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </VIEWCATEGORIES> <VIEWFLOWSHEETINFO> <APPLICATION>JEDFLOHP</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> View Flowsheet Info</NAME> <ORDER>8</ORDER> <SHORTCUT>VF</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </VIEWFLOWSHEETINFO> <VIEWRECORDS> <APPLICATION>all^EAVIEWID</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> View Records</NAME> <ORDER>9</ORDER> <SHORTCUT>VR</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </VIEWRECORDS> <VIEWRULELOG> <APPLICATION>HWKSPRULELOG</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> View Rule Log</NAME> <ORDER>10</ORDER> <SHORTCUT>VL</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </VIEWRULELOG> </Analyst Tools> <MAIN> <APPLICATION ACCESS MENU> <APPLICATION>EPIC</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Application Access Menu</NAME> <ORDER>1</ORDER> <SHORTCUT>E</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </APPLICATION ACCESS MENU> <Analyst Tools> <LINK>Analyst Tools</LINK> <NAME> Analyst Tools</NAME> <ORDER>4</ORDER> <SHORTCUT>T</SHORTCUT> <TYPE>SUBMENU</TYPE> </Analyst Tools> <EPIC UTILITIES> <APPLICATION>EPICUTILS</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Epic Utilities</NAME> <ORDER>2</ORDER> <SHORTCUT>U</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </EPIC UTILITIES> <HYPERSPACE CONFIGURATION> <APPLICATION>EDTop</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Hyperspace Configuration</NAME> <ORDER>3</ORDER> <SHORTCUT>H</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </HYPERSPACE CONFIGURATION> <TROUBLESHOOTING MACROS> <APPLICATION>LAMENU(\"M-505\",\"~C\")</APPLICATION> <ENABLE_LINKABLE_TEMPLATES>1</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Troubleshooting Macros</NAME> <ORDER>5</ORDER> <SHORTCUT>TM</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </TROUBLESHOOTING MACROS> <EZMENU> <APPLICATION>^EZMENU</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>1</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> EZMENU</NAME> <ORDER>6</ORDER> <SHORTCUT>EM</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </EZMENU> </MAIN> </MENU_DEF> </xml>","title":"epicmenu.conf.j2"},{"location":"roletemplates/emenv/epicmenu.conf.j2/#epicmenuconfj2","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <xml> <AUTOFIND></AUTOFIND> <MENUHEADER>{{ EpicEnvironment['Instance'] }} Environment</MENUHEADER> <MENU_DEF> <Analyst Tools> <CLARITYEXPORT> <APPLICATION>CRPACK</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Clarity Export</NAME> <ORDER>1</ORDER> <SHORTCUT>CX</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </CLARITYEXPORT> <EXPORTCATEGORIES> <APPLICATION>EACATOUT</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Export Categories</NAME> <ORDER>2</ORDER> <SHORTCUT>EC</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </EXPORTCATEGORIES> <EXPORTRECORDS> <APPLICATION>main^JXPORT</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Export Records</NAME> <ORDER>3</ORDER> <SHORTCUT>ER</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </EXPORTRECORDS> <GENERATEIMPORTSPREADSHEET> <APPLICATION>JXPORT</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Generate Import Spreadsheet</NAME> <ORDER>4</ORDER> <SHORTCUT>GI</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </GENERATEIMPORTSPREADSHEET> <IMPORTCATEGORIES> <APPLICATION>EACATIN</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Import Categories</NAME> <ORDER>5</ORDER> <SHORTCUT>IC</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </IMPORTCATEGORIES> <RICHTEXTCONTENTREVIEW> <APPLICATION>CIRPT</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Rich Text Content Review</NAME> <ORDER>6</ORDER> <SHORTCUT>RT</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </RICHTEXTCONTENTREVIEW> <ROUTERREPOSTUTILITY> <APPLICATION>RepostUtil^KECRUTL16()</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Router Repost Utility</NAME> <ORDER>12</ORDER> <SHORTCUT>RRU</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </ROUTERREPOSTUTILITY> <TESTINGTOOLMENU> <APPLICATION>JATMENU</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Testing Tool Menu</NAME> <ORDER>11</ORDER> <SHORTCUT>JAT</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </TESTINGTOOLMENU> <VIEWCATEGORIES> <APPLICATION>EACATVW</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> View Categories</NAME> <ORDER>7</ORDER> <SHORTCUT>VC</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </VIEWCATEGORIES> <VIEWFLOWSHEETINFO> <APPLICATION>JEDFLOHP</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> View Flowsheet Info</NAME> <ORDER>8</ORDER> <SHORTCUT>VF</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </VIEWFLOWSHEETINFO> <VIEWRECORDS> <APPLICATION>all^EAVIEWID</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> View Records</NAME> <ORDER>9</ORDER> <SHORTCUT>VR</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </VIEWRECORDS> <VIEWRULELOG> <APPLICATION>HWKSPRULELOG</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>0</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> View Rule Log</NAME> <ORDER>10</ORDER> <SHORTCUT>VL</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </VIEWRULELOG> </Analyst Tools> <MAIN> <APPLICATION ACCESS MENU> <APPLICATION>EPIC</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Application Access Menu</NAME> <ORDER>1</ORDER> <SHORTCUT>E</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </APPLICATION ACCESS MENU> <Analyst Tools> <LINK>Analyst Tools</LINK> <NAME> Analyst Tools</NAME> <ORDER>4</ORDER> <SHORTCUT>T</SHORTCUT> <TYPE>SUBMENU</TYPE> </Analyst Tools> <EPIC UTILITIES> <APPLICATION>EPICUTILS</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Epic Utilities</NAME> <ORDER>2</ORDER> <SHORTCUT>U</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </EPIC UTILITIES> <HYPERSPACE CONFIGURATION> <APPLICATION>EDTop</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Hyperspace Configuration</NAME> <ORDER>3</ORDER> <SHORTCUT>H</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </HYPERSPACE CONFIGURATION> <TROUBLESHOOTING MACROS> <APPLICATION>LAMENU(\"M-505\",\"~C\")</APPLICATION> <ENABLE_LINKABLE_TEMPLATES>1</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> Troubleshooting Macros</NAME> <ORDER>5</ORDER> <SHORTCUT>TM</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </TROUBLESHOOTING MACROS> <EZMENU> <APPLICATION>^EZMENU</APPLICATION> <CONFIG_DIR>/epic/{{ EpicEnvironment['Instance'] | lower }}/conf</CONFIG_DIR> <ENABLE_LINKABLE_TEMPLATES>1</ENABLE_LINKABLE_TEMPLATES> <ENVIRONMENT>{{ EpicEnvironment['Environment'] }}</ENVIRONMENT> <INSTANCE>{{ EpicEnvironment['Instance'] }}</INSTANCE> <NAME> EZMENU</NAME> <ORDER>6</ORDER> <SHORTCUT>EM</SHORTCUT> <TYPE>EPIC</TYPE> <ZBAPPOS>1</ZBAPPOS> </EZMENU> </MAIN> </MENU_DEF> </xml>","title":"epicmenu.conf.j2"},{"location":"roletemplates/epicmenu/epicmenu.conf.j2/","text":"epicmenu.conf.j2 <?xml version=\"1.0\" encoding=\"utf-8\"?> <xml> <AUTOFIND>0</AUTOFIND> <MENU_DEF> <MAIN> {% set ns = namespace(order=0) %} {% for EpicEnvironment in epic_environments %} <{{ EpicEnvironment['Instance'] }}> <COMMAND>/epic/{{ EpicEnvironment['Instance'] | lower }}/bin/epicmenu</COMMAND> <NAME>{{ EpicEnvironment['Instance'] }}</NAME> <ORDER>{{ loop.index }}</ORDER> <SHORTCUT>{{ EpicEnvironment['Instance'] }}</SHORTCUT> <TYPE>COMMAND</TYPE> </{{ EpicEnvironment['Instance'] }}> {% set ns.order = loop.index + 1 %} {% endfor %} </MAIN> </MENU_DEF> </xml>","title":"epicmenu.conf.j2"},{"location":"roletemplates/epicmenu/epicmenu.conf.j2/#epicmenuconfj2","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?> <xml> <AUTOFIND>0</AUTOFIND> <MENU_DEF> <MAIN> {% set ns = namespace(order=0) %} {% for EpicEnvironment in epic_environments %} <{{ EpicEnvironment['Instance'] }}> <COMMAND>/epic/{{ EpicEnvironment['Instance'] | lower }}/bin/epicmenu</COMMAND> <NAME>{{ EpicEnvironment['Instance'] }}</NAME> <ORDER>{{ loop.index }}</ORDER> <SHORTCUT>{{ EpicEnvironment['Instance'] }}</SHORTCUT> <TYPE>COMMAND</TYPE> </{{ EpicEnvironment['Instance'] }}> {% set ns.order = loop.index + 1 %} {% endfor %} </MAIN> </MENU_DEF> </xml>","title":"epicmenu.conf.j2"},{"location":"tasks/epicmenu/","text":"epicmenu.yml create conf directory Tags: epicmenu create bin directory Tags: epicmenu install epicmenu confs Tags: epicmenu ensure links exists for epicmenus Tags: epicmenu","title":"epicmenu.yml"},{"location":"tasks/epicmenu/#epicmenuyml","text":"create conf directory Tags: epicmenu create bin directory Tags: epicmenu install epicmenu confs Tags: epicmenu ensure links exists for epicmenus Tags: epicmenu","title":"epicmenu.yml"},{"location":"tasks/firewall_rules/","text":"firewall_rules.yml set epic_firewall_short Tags: firewall set epic_firewall_description Tags: firewall set epic_firewall_ports Tags: firewall clear ufw ports line Tags: firewall set ufw ports line Tags: firewall add protocol to ufw ports line Tags: firewall copy {{ epic_firewall_short }} firewall rule Tags: firewall copy {{ epic_firewall_short }} firewall rule Tags: firewall","title":"firewall_rules.yml"},{"location":"tasks/firewall_rules/#firewall_rulesyml","text":"set epic_firewall_short Tags: firewall set epic_firewall_description Tags: firewall set epic_firewall_ports Tags: firewall clear ufw ports line Tags: firewall set ufw ports line Tags: firewall add protocol to ufw ports line Tags: firewall copy {{ epic_firewall_short }} firewall rule Tags: firewall copy {{ epic_firewall_short }} firewall rule Tags: firewall","title":"firewall_rules.yml"},{"location":"tasks/flow/","text":"Flow graph LR main.yml(main.yml) --> sysctl.yml(sysctl.yml) main.yml(main.yml) --> firewall_rules.yml(firewall_rules.yml) main.yml(main.yml) --> epicmenu.yml(epicmenu.yml)","title":"Flow"},{"location":"tasks/flow/#flow","text":"graph LR main.yml(main.yml) --> sysctl.yml(sysctl.yml) main.yml(main.yml) --> firewall_rules.yml(firewall_rules.yml) main.yml(main.yml) --> epicmenu.yml(epicmenu.yml)","title":"Flow"},{"location":"tasks/main/","text":"main.yml create Epic groups create cachegrp create irisusr create Epic users Block: Install packages for Red Hat distros ensure packges needed for Epic and role are installed Tags: Block: Install packages for Red Hat distros ensure packages needed for Epic and role are installed gather package facts load service facts Block: configure EL < 8 stop and disable tuned configure security limits check and config sysctl configure hugepage size disable alt+ctrl+del Add transparent_hugepage setting to kernel command line copy Epic sudoers file Block: configure EL > 7 configure hugepage group configure number of hugepages create /usr/local/epic create core dump directory create epicfiles directory create epic directory create bin directory Tags: epicmenu create /epic/tmp directory create /epic/pki ensure encryption keys directory exists set default file context for bin directories set default file context for instance bin directories install service files make sure epic@.service is enabled enable redalert.service check sslcert binary check RedAlert conf file get ESMP_TRUSTED_DIR get contents of ESMP_TRUSTED_DIR Block: get CA bundle from uri copy CA bunle from {{ ca_bundle }} Block: get CA bundle from file check for CA bundle copy CA certs Get selinux port tags for ssh_port_t enable SSH on port 2222 in selinux create /etc/ssh disable root login over SSH explicily enable port 22 set sshd to listen on port 2222 set port 2222 to sftp only set epic menus for groups set epic menus for users copy /usr/local/bin files create manage_epicuser_group add cron job for manage_epicuser_group add audit lines to PAM files create working copy of system sudoers file back up sudoers file remove Defaults requiretty check for sudoers differences Check working copy of suders file, and replace active sudoers config refresh service facts Tags: firewall start firewalld Tags: firewall ufw started Tags: firewall Setup firewall rules Tags: firewall refresh service facts Tags: firewall Block: Enable firewall rules on EL reload firewalld Tags: Block: Enable firewall rules on Ubuntu reload firewalld Tags: get status of /etc/vmware-tools directory copy tools.conf Generate private key Generate CSR check for chrony.conf Block: update chrony config disable makestep set minsources to 2 set logchange to 0.5 create conf directory Tags: epicmenu install epicmenu confs Tags: epicmenu ensure links exists for epicmenus Tags: epicmenu install environment epicmenus Tags: epicmenu","title":"main.yml"},{"location":"tasks/main/#mainyml","text":"create Epic groups create cachegrp create irisusr create Epic users Block: Install packages for Red Hat distros ensure packges needed for Epic and role are installed Tags: Block: Install packages for Red Hat distros ensure packages needed for Epic and role are installed gather package facts load service facts Block: configure EL < 8 stop and disable tuned configure security limits check and config sysctl configure hugepage size disable alt+ctrl+del Add transparent_hugepage setting to kernel command line copy Epic sudoers file Block: configure EL > 7 configure hugepage group configure number of hugepages create /usr/local/epic create core dump directory create epicfiles directory create epic directory create bin directory Tags: epicmenu create /epic/tmp directory create /epic/pki ensure encryption keys directory exists set default file context for bin directories set default file context for instance bin directories install service files make sure epic@.service is enabled enable redalert.service check sslcert binary check RedAlert conf file get ESMP_TRUSTED_DIR get contents of ESMP_TRUSTED_DIR Block: get CA bundle from uri copy CA bunle from {{ ca_bundle }} Block: get CA bundle from file check for CA bundle copy CA certs Get selinux port tags for ssh_port_t enable SSH on port 2222 in selinux create /etc/ssh disable root login over SSH explicily enable port 22 set sshd to listen on port 2222 set port 2222 to sftp only set epic menus for groups set epic menus for users copy /usr/local/bin files create manage_epicuser_group add cron job for manage_epicuser_group add audit lines to PAM files create working copy of system sudoers file back up sudoers file remove Defaults requiretty check for sudoers differences Check working copy of suders file, and replace active sudoers config refresh service facts Tags: firewall start firewalld Tags: firewall ufw started Tags: firewall Setup firewall rules Tags: firewall refresh service facts Tags: firewall Block: Enable firewall rules on EL reload firewalld Tags: Block: Enable firewall rules on Ubuntu reload firewalld Tags: get status of /etc/vmware-tools directory copy tools.conf Generate private key Generate CSR check for chrony.conf Block: update chrony config disable makestep set minsources to 2 set logchange to 0.5 create conf directory Tags: epicmenu install epicmenu confs Tags: epicmenu ensure links exists for epicmenus Tags: epicmenu install environment epicmenus Tags: epicmenu","title":"main.yml"},{"location":"tasks/sysctl/","text":"sysctl.yml check for {{ item['name'] }} sysctl setting configure {{ item['name'] }} sysctl","title":"sysctl.yml"},{"location":"tasks/sysctl/#sysctlyml","text":"check for {{ item['name'] }} sysctl setting configure {{ item['name'] }} sysctl","title":"sysctl.yml"},{"location":"variables/main/","text":"main.yml","title":"main.yml"},{"location":"variables/main/#mainyml","text":"","title":"main.yml"}]}